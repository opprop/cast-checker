import org.checkerframework.common.value.qual.IntRange;
import org.checkerframework.common.value.qual.IntVal;

package org.apache.commons.io;
public class IOUtils extends Object {
	public static final @IntVal(-1) int EOF;
}

// InputStream stubs
package java.io;
public abstract class InputStream implements Closeable {
    public abstract @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class FilterInputStream extends InputStream {
    public @IntRange(from=-1, to=2147483647) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class SequenceInputStream extends InputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class PipedInputStream extends InputStream {
    public @IntRange(from=-1, to=255) synchronized int read()  throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class LineNumberInputStream extends FilterInputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class FileInputStream extends InputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class PushbackInputStream extends FilterInputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class ByteArrayInputStream extends InputStream {
    public @IntRange(from=-1, to=255) synchronized int read();
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class StringBufferInputStream extends InputStream {
    public @IntRange(from=-1, to=255) synchronized int read();
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class BufferedInputStream extends FilterInputStream {
    public @IntRange(from=-1, to=255) synchronized int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class ObjectInputStream extends InputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class ObjectInputStream extends InputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class ObjectInputStream extends InputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}


package java.net;
public class SocketInputStream extends FileInputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}

package javax.swing;
public class ProgressMonitorInputStream extends FilterInputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}

package javax.sound.sampled;
public class AudioInputStream extends InputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}

package javax.imageio;
public interface ImageInputStream extends DataInput, Closeable {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class FileImageInputStream extends ImageInputStreamImpl {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class FileCacheImageInputStream extends ImageInputStreamImpl {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class MemoryCacheImageInputStream extends ImageInputStreamImpl {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}

package org.omg.CORBA;
public abstract class InputStream extends java.io.InputStream {
    public @IntRange(from=-1, to=255) int read() throws java.io.IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}

package java.util.zip;
class CheckedInputStream extends FilterInputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
public class DeflaterInputStream extends FilterInputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}
class InflaterInputStream extends FilterInputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}

package java.security;
public class DigestInputStream extends FilterInputStream {
    public @IntRange(from=-1, to=255) int read() throws IOException;
    public void mark(int readlimit);
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(@IntRange(from=-128, to=255) byte[] b, int off, int len) throws IOException;
}

// Reader stubs
package java.io;
public abstract class Reader implements Readable, Closeable {
    public @IntRange(from=-1, to=65535) int read() throws IOException;
    public void mark(int readAheadLimit) throws IOException;
    public abstract @IntRange(from=-1, to=2147483647) int read(char[] cbuf, int off, int len) throws IOException;
}
public abstract class FilterReader extends Reader {
    public @IntRange(from=-1, to=65535) int read() throws IOException;
    public void mark(int readAheadLimit) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(char[] cbuf, int off, int len) throws IOException;
}
public class CharArrayReader extends Reader {
    public @IntRange(from=-1, to=65535) int read() throws IOException;
    public void mark(int readAheadLimit) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(char[] cbuf, int off, int len) throws IOException;
}
public class LineNumberReader extends BufferedReader {
    public @IntRange(from=-1, to=65535) int read() throws IOException;
    public void mark(int readAheadLimit) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(char[] cbuf, int off, int len) throws IOException;
}
public class StringReader extends Reader {
    public @IntRange(from=-1, to=65535) int read() throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(char[] cbuf, int off, int len) throws IOException;
}
public class InputStreamReader extends Reader {
    public @IntRange(from=-1, to=65535) int read() throws IOException;
    public void mark(int readAheadLimit) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(char[] cbuf, int off, int len) throws IOException;
}
public class BufferedReader extends Reader {
    public @IntRange(from=-1, to=65535) int read() throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(char[] cbuf, int off, int len) throws IOException;
}
public class PipedReader extends Reader {
    public synchronized @IntRange(from=-1, to=65535) int read()  throws IOException;
    public void mark(int readAheadLimit) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(char[] cbuf, int off, int len) throws IOException;
}
public class PushbackReader extends FilterReader {
    public @IntRange(from=-1, to=65535) int read() throws IOException;
    public void mark(int readAheadLimit) throws IOException;
    public @IntRange(from=-1, to=2147483647) int read(char[] cbuf, int off, int len) throws IOException;
}
